#ESBL-Ec in WW------
##Load required packages------
library(dplyr)
library(RColorBrewer)
library(ggplot2)
library(geomtextpath)
library(tidyr)
library(stats)
library(tidyverse)
library(lubridate)
library(lme4)
library(plyr)
library(ggpubr)
library(gridExtra)
library(ggpmisc)
library(mgcv)
library(data.table)
library(scales)
library(MASS)
library(coin)
library(dunn.test)
##Formatting df-------------------
#Import datasets
setwd("/Users/conforsh/switchdrive/Institution/Manuscripts/esblec-monitor-ww-21-22/data")
##Formatting df-------------------
#Import datasets
setwd("/Users/conforsh/switchdrive/Institution/Manuscripts/ESBL_ecoli_ww_monitoring/esblec-monitor-ww-21-22/data")
df <- read.csv("ecoli_counts.csv", header = TRUE)
df
setwd("/Users/conforsh/switchdrive/Institution/Manuscripts/ESBL_ecoli_ww_monitoring/esblec-monitor-ww-21-22/code")
##CDF, mean and median of Bangladesh ESBL-E.coli percentage in the gut----------------
#Percentage of ESBL-E. coli out of total E. coli in the gut of children
setwd("/Users/conforsh/switchdrive/Institution/Manuscripts/ESBL_ecoli_ww_monitoring/esblec-monitor-ww-21-22/data")
##Formatting df-------------------
#Import datasets
setwd("/Users/conforsh/switchdrive/Institution/Manuscripts/ESBL_ecoli_ww_monitoring/esblec-monitor-ww-21-22/data")
df <- read.csv("ecoli_counts.csv", header = TRUE)
df
#Convert the date column to a date format
df$date <- as.Date(df$date, format = "%d_%m_%Y")
#Create a new column for month
df$month <- as.factor(format(df$date, "%b"))
#Extract the year from the date column
df$year <- as.numeric(format(df$date, "%Y"))
#Create a new column for season based on specific dates
df$season <- ifelse(df$date >= as.Date(paste0(df$year, "-03-23")) & df$date < as.Date(paste0(df$year, "-06-23")), "Spring",
ifelse(df$date >= as.Date(paste0(df$year, "-06-23")) & df$date < as.Date(paste0(df$year, "-09-23")), "Summer",
ifelse(df$date >= as.Date(paste0(df$year, "-09-22")) & df$date < as.Date(paste0(df$year, "-12-22")), "Fall",
"Winter")))
#Create a new column for seasons specific of different years
df$season_year <- paste(df$season, df$year, sep = " ")
df$month_year = paste(df$month, df$year, sep = " ")
#Change name of WWTPs
df$wwtp[which(df$wwtp=="Altenrhein")] <- "ARA Altenrhein"
df$wwtp[which(df$wwtp=="Lugano")] <- "IDA CDA Lugano"
df$wwtp[which(df$wwtp=="Geneva")] <- "STEP d'Aïre Genève"
df$wwtp[which(df$wwtp=="Laupen")] <- "ARA Sensetal Laupen"
df$wwtp[which(df$wwtp=="Zurich")] <- "ARA Werdhölzli Zürich"
df$wwtp[which(df$wwtp=="Chur")] <- "ARA Chur"
#Convert E.coli data as numeric
df$esblEc_percentage_a=as.numeric(df$esblEc_percentage_a)
df$esblEc_percentage_b=as.numeric(df$esblEc_percentage_b)
df$esblEc_loads_a=as.numeric(df$esblEc_loads_a)
df$esblEc_loads_b=as.numeric(df$esblEc_loads_b)
df$totalEc_loads_a=as.numeric(df$totalEc_loads_a)
df$totalEc_loads_b=as.numeric(df$totalEc_loads_b)
df$totalEc_cfu_100ml_a=as.numeric(df$totalEc_cfu_100ml_a)
df$totalEc_cfu_100ml_b=as.numeric(df$totalEc_cfu_100ml_b)
df$esblEc_cfu_100ml_a=as.numeric(df$esblEc_cfu_100ml_a)
df$esblEc_cfu_100ml_b=as.numeric(df$esblEc_cfu_100ml_b)
#Create an average value of the E.coli data replicates and use the non-missing value if one of the two replicates is missing
df$average_ESBL_Ec <- as.numeric(ifelse(is.na(df$esblEc_percentage_a) | is.na(df$esblEc_percentage_b),
ifelse(is.na(df$esblEc_percentage_a), df$esblEc_percentage_b, df$esblEc_percentage_a),
rowMeans(df[,c("esblEc_percentage_a", "esblEc_percentage_b")], na.rm = TRUE)))
df$average_loads_tot_Ec <- as.numeric(ifelse(is.na(df$totalEc_loads_a) | is.na(df$totalEc_loads_b),
ifelse(is.na(df$totalEc_loads_a), df$totalEc_loads_b, df$totalEc_loads_a),
rowMeans(df[,c("totalEc_loads_a", "totalEc_loads_b")], na.rm = TRUE)))
df$average_loads_ESBL_Ec <- as.numeric(ifelse(is.na(df$esblEc_loads_a) | is.na(df$esblEc_loads_b),
ifelse(is.na(df$esblEc_loads_a), df$esblEc_loads_b, df$esblEc_loads_a),
rowMeans(df[,c("esblEc_loads_a", "esblEc_loads_b")], na.rm = TRUE)))
df$counts_tot_Ec_1 = (df$totalEc_cfu_100ml_a)/100 #CFU/mL
df$counts_tot_Ec_2 =(df$totalEc_cfu_100ml_b)/100 #CFU/mL
df$average_counts_tot_Ec <- as.numeric(ifelse(is.na(df$counts_tot_Ec_1) | is.na(df$counts_tot_Ec_2),
ifelse(is.na(df$counts_tot_Ec_1), df$counts_tot_Ec_2, df$counts_tot_Ec_1),
rowMeans(df[,c("counts_tot_Ec_1", "counts_tot_Ec_2")], na.rm = TRUE)))
df$counts_ESBL_Ec_1 = (df$esblEc_cfu_100ml_a)/100 #CFU/mL
df$counts_ESBL_Ec_2 =(df$esblEc_cfu_100ml_b)/100 #CFU/mL
df$average_counts_ESBL_Ec <- as.numeric(ifelse(is.na(df$counts_ESBL_Ec_1) | is.na(df$counts_ESBL_Ec_2),
ifelse(is.na(df$counts_ESBL_Ec_1), df$counts_ESBL_Ec_2, df$counts_ESBL_Ec_1),
rowMeans(df[,c("counts_ESBL_Ec_1", "counts_ESBL_Ec_2")], na.rm = TRUE)))
#Subset df for WWTPs
df_sen = df %>% filter(wwtp == "ARA Sensetal Laupen")
df_lug = df %>% filter(wwtp == "IDA CDA Lugano")
df_alt = df %>% filter(wwtp == "ARA Altenrhein")
df_chu = df %>% filter(wwtp == "ARA Chur")
df_zur = df %>% filter(wwtp == "ARA Werdhölzli Zürich")
df_gen = df %>% filter(wwtp == "STEP d'Aïre Genève")
#Create a df without NAs for the variable ESBL-E. coli percentage
df_filtered = filter(df, !is.na(average_ESBL_Ec))
#Subset the new filtered df
df_per_alt = df_filtered %>% filter(wwtp == "ARA Altenrhein")
df_per_chu = df_filtered %>% filter(wwtp == "ARA Chur")
df_per_gen = df_filtered %>% filter(wwtp == "STEP d'Aïre Genève")
df_per_zur = df_filtered %>% filter(wwtp == "ARA Werdhölzli Zürich")
df_per_lug = df_filtered %>% filter(wwtp == "IDA CDA Lugano")
df_per_sen = df_filtered %>% filter(wwtp == "ARA Sensetal Laupen")
#Create a df without NAs for the variable total-E. coli loads
df_filtered_t = filter(df, !is.na(average_loads_tot_Ec))
#Subset the new filtered df
df_tot_alt = df_filtered_t %>% filter(wwtp == "ARA Altenrhein")
df_tot_chu = df_filtered_t %>% filter(wwtp == "ARA Chur")
df_tot_gen = df_filtered_t %>% filter(wwtp == "STEP d'Aïre Genève")
df_tot_zur = df_filtered_t %>% filter(wwtp == "ARA Werdhölzli Z?rich")
df_tot_lug = df_filtered_t %>% filter(wwtp == "IDA CDA Lugano")
df_tot_sen = df_filtered_t %>% filter(wwtp == "ARA Sensetal Laupen")
#Create a df without NAs for the variable ESBL-E. coli loads
df_filtered_r = filter(df, !is.na(average_loads_ESBL_Ec))
#Subset the new filtered df
df_ESBL_alt = df_filtered_r %>% filter(wwtp == "ARA Altenrhein")
df_ESBL_chu = df_filtered_r %>% filter(wwtp == "ARA Chur")
df_ESBL_gen = df_filtered_r %>% filter(wwtp == "STEP d'Aïre Genève")
df_ESBL_zur = df_filtered_r %>% filter(wwtp == "ARA Werdhölzli Zürich")
df_ESBL_lug = df_filtered_r %>% filter(wwtp == "IDA CDA Lugano")
df_ESBL_sen = df_filtered_r %>% filter(wwtp == "ARA Sensetal Laupen")
##Environmental variables-------
df$temperature=as.numeric(df$temperature)
df$precipitations_24h_sum_mm=as.numeric(df$precipitations_24h_sum_mm)
df$precipitations_96h_sum_mm=as.numeric(df$precipitations_96h_sum_mm)
df$wwtp <- as.factor(df$wwtp)
unique_locations <- unique(df$wwtp) # Unique locations in your dataset
####ESBL-Ec percentage---------------------
#####Temperature-------------------------------
correlation_results <- list()
alpha <- 0.05  # Set your desired significance level (e.g., 0.05)
for (loc in unique_locations) {
data_loc <- subset(df, df$wwtp == loc)  # Subset data for the specific location
correlation_result <- cor.test(data_loc$average_ESBL_Ec, data_loc$temperature, method = "spearman")
# Apply Bonferroni correction
p_value_corrected <- correlation_result$p.value * length(unique_locations)
significant <- p_value_corrected <= alpha
correlation_results[[loc]] <- list(
correlation_coefficient = correlation_result$estimate,
p_value = correlation_result$p.value,
p_value_corrected = p_value_corrected,
significant = significant
)
}
# Access the correlation coefficients, p-values, and corrected p-values for each location
for (loc in unique_locations) {
result <- correlation_results[[loc]]
correlation_coefficient <- result$correlation_coefficient
p_value <- result$p_value
p_value_corrected <- result$p_value_corrected
significant <- result$significant
print(paste("Correlation coefficient for", loc, ":", correlation_coefficient))
print(paste("Raw p-value for", loc, ":", p_value))
print(paste("Bonferroni-corrected p-value for", loc, ":", p_value_corrected))
print(paste("Significant for", loc, ":", significant))
}
#####Precipitation 24h------------------------------
correlation_results <- list()
alpha <- 0.05  # Set your desired significance level (e.g., 0.05)
for (loc in unique_locations) {
data_loc <- subset(df, df$wwtp == loc)  # Subset data for the specific location
correlation_result <- cor.test(data_loc$average_ESBL_Ec, data_loc$precipitations_24h_sum_mm, method = "spearman")
# Apply Bonferroni correction
p_value_corrected <- correlation_result$p.value * length(unique_locations)
significant <- p_value_corrected <= alpha
correlation_results[[loc]] <- list(
correlation_coefficient = correlation_result$estimate,
p_value = correlation_result$p.value,
p_value_corrected = p_value_corrected,
significant = significant
)
}
# Access the correlation coefficients, p-values, and corrected p-values for each location
for (loc in unique_locations) {
result <- correlation_results[[loc]]
correlation_coefficient <- result$correlation_coefficient
p_value <- result$p_value
p_value_corrected <- result$p_value_corrected
significant <- result$significant
print(paste("Correlation coefficient for", loc, ":", correlation_coefficient))
print(paste("Raw p-value for", loc, ":", p_value))
print(paste("Bonferroni-corrected p-value for", loc, ":", p_value_corrected))
print(paste("Significant for", loc, ":", significant))
}
#####Precipitation 96h------------------------------------
correlation_results <- list()
alpha <- 0.05  # Set your desired significance level (e.g., 0.05)
for (loc in unique_locations) {
data_loc <- subset(df, df$wwtp == loc)  # Subset data for the specific location
correlation_result <- cor.test(data_loc$average_ESBL_Ec, data_loc$precipitations_96h_sum_mm, method = "spearman")
# Apply Bonferroni correction
p_value_corrected <- correlation_result$p.value * length(unique_locations)
significant <- p_value_corrected <= alpha
correlation_results[[loc]] <- list(
correlation_coefficient = correlation_result$estimate,
p_value = correlation_result$p.value,
p_value_corrected = p_value_corrected,
significant = significant
)
}
# Access the correlation coefficients, p-values, and corrected p-values for each location
for (loc in unique_locations) {
result <- correlation_results[[loc]]
correlation_coefficient <- result$correlation_coefficient
p_value <- result$p_value
p_value_corrected <- result$p_value_corrected
significant <- result$significant
print(paste("Correlation coefficient for", loc, ":", correlation_coefficient))
print(paste("Raw p-value for", loc, ":", p_value))
print(paste("Bonferroni-corrected p-value for", loc, ":", p_value_corrected))
print(paste("Significant for", loc, ":", significant))
}
####Loads ESBL-E. coli--------------
#####Temperature--------------------------------
correlation_results <- list()
alpha <- 0.05  # Set your desired significance level (e.g., 0.05)
for (loc in unique_locations) {
data_loc <- subset(df, df$wwtp == loc)  # Subset data for the specific location
correlation_result <- cor.test(data_loc$average_loads_ESBL_Ec, data_loc$temperature, method = "spearman")
# Apply Bonferroni correction
p_value_corrected <- correlation_result$p.value * length(unique_locations)
significant <- p_value_corrected <= alpha
correlation_results[[loc]] <- list(
correlation_coefficient = correlation_result$estimate,
p_value = correlation_result$p.value,
p_value_corrected = p_value_corrected,
significant = significant
)
}
# Access the correlation coefficients, p-values, and corrected p-values for each location
for (loc in unique_locations) {
result <- correlation_results[[loc]]
correlation_coefficient <- result$correlation_coefficient
p_value <- result$p_value
p_value_corrected <- result$p_value_corrected
significant <- result$significant
print(paste("Correlation coefficient for", loc, ":", correlation_coefficient))
print(paste("Raw p-value for", loc, ":", p_value))
print(paste("Bonferroni-corrected p-value for", loc, ":", p_value_corrected))
print(paste("Significant for", loc, ":", significant))
}
#####Precipitation 24h-----------------------
correlation_results <- list()
alpha <- 0.05  # Set your desired significance level (e.g., 0.05)
for (loc in unique_locations) {
data_loc <- subset(df, df$wwtp == loc)  # Subset data for the specific location
correlation_result <- cor.test(data_loc$average_loads_ESBL_Ec, data_loc$precipitations_24h_sum_mm, method = "spearman")
# Apply Bonferroni correction
p_value_corrected <- correlation_result$p.value * length(unique_locations)
significant <- p_value_corrected <= alpha
correlation_results[[loc]] <- list(
correlation_coefficient = correlation_result$estimate,
p_value = correlation_result$p.value,
p_value_corrected = p_value_corrected,
significant = significant
)
}
# Access the correlation coefficients, p-values, and corrected p-values for each location
for (loc in unique_locations) {
result <- correlation_results[[loc]]
correlation_coefficient <- result$correlation_coefficient
p_value <- result$p_value
p_value_corrected <- result$p_value_corrected
significant <- result$significant
print(paste("Correlation coefficient for", loc, ":", correlation_coefficient))
print(paste("Raw p-value for", loc, ":", p_value))
print(paste("Bonferroni-corrected p-value for", loc, ":", p_value_corrected))
print(paste("Significant for", loc, ":", significant))
}
#####Precipitation 96h-----------------------------------
correlation_results <- list()
alpha <- 0.05  # Set your desired significance level (e.g., 0.05)
for (loc in unique_locations) {
data_loc <- subset(df, df$wwtp == loc)  # Subset data for the specific location
correlation_result <- cor.test(data_loc$average_loads_ESBL_Ec, data_loc$precipitations_96h_sum_mm, method = "spearman")
# Apply Bonferroni correction
p_value_corrected <- correlation_result$p.value * length(unique_locations)
significant <- p_value_corrected <= alpha
correlation_results[[loc]] <- list(
correlation_coefficient = correlation_result$estimate,
p_value = correlation_result$p.value,
p_value_corrected = p_value_corrected,
significant = significant
)
}
# Access the correlation coefficients, p-values, and corrected p-values for each location
for (loc in unique_locations) {
result <- correlation_results[[loc]]
correlation_coefficient <- result$correlation_coefficient
p_value <- result$p_value
p_value_corrected <- result$p_value_corrected
significant <- result$significant
print(paste("Correlation coefficient for", loc, ":", correlation_coefficient))
print(paste("Raw p-value for", loc, ":", p_value))
print(paste("Bonferroni-corrected p-value for", loc, ":", p_value_corrected))
print(paste("Significant for", loc, ":", significant))
}
e
e
####Loads total E. coli------------------------
#####Temperature-----------------------
correlation_results <- list()
alpha <- 0.05  # Set your desired significance level (e.g., 0.05)
for (loc in unique_locations) {
data_loc <- subset(df, df$wwtp == loc)  # Subset data for the specific location
correlation_result <- cor.test(data_loc$average_loads_tot_Ec, data_loc$temperature, method = "spearman")
# Apply Bonferroni correction
p_value_corrected <- correlation_result$p.value * length(unique_locations)
significant <- p_value_corrected <= alpha
correlation_results[[loc]] <- list(
correlation_coefficient = correlation_result$estimate,
p_value = correlation_result$p.value,
p_value_corrected = p_value_corrected,
significant = significant
)
}
# Access the correlation coefficients, p-values, and corrected p-values for each location
for (loc in unique_locations) {
result <- correlation_results[[loc]]
correlation_coefficient <- result$correlation_coefficient
p_value <- result$p_value
p_value_corrected <- result$p_value_corrected
significant <- result$significant
print(paste("Correlation coefficient for", loc, ":", correlation_coefficient))
print(paste("Raw p-value for", loc, ":", p_value))
print(paste("Bonferroni-corrected p-value for", loc, ":", p_value_corrected))
print(paste("Significant for", loc, ":", significant))
}
#####Precipitation 24h-------------------------------
correlation_results <- list()
#####Precipitation 24h-------------------------------
correlation_results <- list()
#####Precipitation 24h-------------------------------
correlation_results <- list()
alpha <- 0.05  # Set your desired significance level (e.g., 0.05)
for (loc in unique_locations) {
data_loc <- subset(df, df$wwtp == loc)  # Subset data for the specific location
correlation_result <- cor.test(data_loc$average_loads_tot_Ec, data_loc$precipitations_24h_sum_mm, method = "spearman")
# Apply Bonferroni correction
p_value_corrected <- correlation_result$p.value * length(unique_locations)
significant <- p_value_corrected <= alpha
correlation_results[[loc]] <- list(
correlation_coefficient = correlation_result$estimate,
p_value = correlation_result$p.value,
p_value_corrected = p_value_corrected,
significant = significant
)
}
# Access the correlation coefficients, p-values, and corrected p-values for each location
for (loc in unique_locations) {
result <- correlation_results[[loc]]
correlation_coefficient <- result$correlation_coefficient
p_value <- result$p_value
p_value_corrected <- result$p_value_corrected
significant <- result$significant
print(paste("Correlation coefficient for", loc, ":", correlation_coefficient))
print(paste("Raw p-value for", loc, ":", p_value))
print(paste("Bonferroni-corrected p-value for", loc, ":", p_value_corrected))
print(paste("Significant for", loc, ":", significant))
}
#####Precipitation 96h------------------------------------
correlation_results <- list()
alpha <- 0.05  # Set your desired significance level (e.g., 0.05)
for (loc in unique_locations) {
data_loc <- subset(df, df$wwtp == loc)  # Subset data for the specific location
correlation_result <- cor.test(data_loc$average_loads_tot_Ec, data_loc$precipitations_96h_sum_mm, method = "spearman")
# Apply Bonferroni correction
p_value_corrected <- correlation_result$p.value * length(unique_locations)
significant <- p_value_corrected <= alpha
correlation_results[[loc]] <- list(
correlation_coefficient = correlation_result$estimate,
p_value = correlation_result$p.value,
p_value_corrected = p_value_corrected,
significant = significant
)
}
# Access the correlation coefficients, p-values, and corrected p-values for each location
for (loc in unique_locations) {
result <- correlation_results[[loc]]
correlation_coefficient <- result$correlation_coefficient
p_value <- result$p_value
p_value_corrected <- result$p_value_corrected
significant <- result$significant
print(paste("Correlation coefficient for", loc, ":", correlation_coefficient))
print(paste("Raw p-value for", loc, ":", p_value))
print(paste("Bonferroni-corrected p-value for", loc, ":", p_value_corrected))
print(paste("Significant for", loc, ":", significant))
}
