#Estimate mean ESBL-Ec adjusted by population in Switzerland
mean = (1.722433*64000+1.397264*55000+2.019172*454000+1.913655*471000+1.970193*124000+1.373625*62000)/(64000+55000+454000+471000+124000+62000)
# Create data frame for Switzerland
data_ch <- data.frame(x = rep(seq(0.01, 1, by = 0.00001)),
a = rep(c(0.0189804))) #a = population weighted mean of gamma_mean of each WWTP.
# Calculate Y based on the function Y = a/x
data_ch$Y <- data_ch$a / data_ch$x
# Set Y values greater than 1 to 1
data_ch$Y[data_ch$Y > 1] <- 1
#Plot
ch <- ggplot(data_ch[data_ch$x >= 0.0189804,], aes(x = x, y = Y)) +
geom_line(color="black", linewidth=1) +
#geom_ribbon(data=data_ch,
#aes(ymin = Ymin, ymax = Ymax), fill = "black", alpha = 0.3, colour=NA) +
scale_x_log10(
limits = c(0.005, 1),
breaks = c(0.005, 0.01,0.1, 1),
labels = c(0.005, 0.01,0.1, 1)) +
labs(x = "Proportion of ESBL-Ec out of total E. coli in the gut",
y = "Prevalence of ESBL-Ec carriage within the community") +
scale_y_continuous(
limits = c(0, 1),
breaks = seq(0, 1, by = 0.2)) +
geom_textvline(label = "0.019", vjust = 1.3, hjust=-0.0,data = data_ch[data_ch$Y == 1, ],
aes(xintercept = a), linetype = "dashed", color="red", alpha = 0.8)+
ggtitle("Switzerland")+
theme_minimal()+
theme(legend.position = "none", plot.title = element_text(hjust = 0.5))
ch
library(ggplot2)
library(geomtextpath)
#Plot
ch <- ggplot(data_ch[data_ch$x >= 0.0189804,], aes(x = x, y = Y)) +
geom_line(color="black", linewidth=1) +
#geom_ribbon(data=data_ch,
#aes(ymin = Ymin, ymax = Ymax), fill = "black", alpha = 0.3, colour=NA) +
scale_x_log10(
limits = c(0.005, 1),
breaks = c(0.005, 0.01,0.1, 1),
labels = c(0.005, 0.01,0.1, 1)) +
labs(x = "Proportion of ESBL-Ec out of total E. coli in the gut",
y = "Prevalence of ESBL-Ec carriage within the community") +
scale_y_continuous(
limits = c(0, 1),
breaks = seq(0, 1, by = 0.2)) +
geom_textvline(label = "0.019", vjust = 1.3, hjust=-0.0,data = data_ch[data_ch$Y == 1, ],
aes(xintercept = a), linetype = "dashed", color="red", alpha = 0.8)+
ggtitle("Switzerland")+
theme_minimal()+
theme(legend.position = "none", plot.title = element_text(hjust = 0.5))
ch
#Plot
ch <- ggplot(data_ch[data_ch$x >= 0.0189804,], aes(x = x, y = Y)) +
geom_line(color="black", linewidth=1) +
#geom_ribbon(data=data_ch,
#aes(ymin = Ymin, ymax = Ymax), fill = "black", alpha = 0.3, colour=NA) +
scale_x_log10(
limits = c(0.005, 1),
breaks = c(0.005, 0.01,0.1, 1),
labels = c(0.005, 0.01,0.1, 1)) +
labs(x = expression(paste("Proportion of ESBL- ", italic("E. coli"), " out of total ", italic("E. coli"), " in the gut (%)")),
y = "Prevalence of ESBL-Ec carriage within the community") +
scale_y_continuous(
limits = c(0, 1),
breaks = seq(0, 1, by = 0.2)) +
geom_textvline(label = "0.019", vjust = 1.3, hjust=-0.0,data = data_ch[data_ch$Y == 1, ],
aes(xintercept = a), linetype = "dashed", color="red", alpha = 0.8)+
ggtitle("Switzerland")+
theme_minimal()+
theme(legend.position = "none", plot.title = element_text(hjust = 0.5))
ch
#Plot
ch <- ggplot(data_ch[data_ch$x >= 0.0189804,], aes(x = x, y = Y)) +
geom_line(color="black", linewidth=1) +
#geom_ribbon(data=data_ch,
#aes(ymin = Ymin, ymax = Ymax), fill = "black", alpha = 0.3, colour=NA) +
scale_x_log10(
limits = c(0.005, 1),
breaks = c(0.005, 0.01,0.1, 1),
labels = c(0.005, 0.01,0.1, 1)) +
labs(x = expression(paste("Proportion of ESBL-", italic("E. coli"), " out of total ", italic("E. coli"), " in the gut (%)")),
y = "Prevalence of ESBL-Ec carriage within the community") +
scale_y_continuous(
limits = c(0, 1),
breaks = seq(0, 1, by = 0.2)) +
geom_textvline(label = "0.019", vjust = 1.3, hjust=-0.0,data = data_ch[data_ch$Y == 1, ],
aes(xintercept = a), linetype = "dashed", color="red", alpha = 0.8)+
ggtitle("Switzerland")+
theme_minimal()+
theme(legend.position = "none", plot.title = element_text(hjust = 0.5))
ch
#Plot
ch <- ggplot(data_ch[data_ch$x >= 0.0189804,], aes(x = x, y = Y)) +
geom_line(color="black", linewidth=1) +
#geom_ribbon(data=data_ch,
#aes(ymin = Ymin, ymax = Ymax), fill = "black", alpha = 0.3, colour=NA) +
scale_x_log10(
limits = c(0.005, 1),
breaks = c(0.005, 0.01,0.1, 1),
labels = c(0.005, 0.01,0.1, 1)) +
labs(x = expression(paste("Proportion of ESBL-", italic("E. coli"), " out of total ", italic("E. coli"), " in the gut (%)")),
y = "Prevalence of ESBL-", italic("E. coli"), " carriage within the community") +
scale_y_continuous(
limits = c(0, 1),
breaks = seq(0, 1, by = 0.2)) +
geom_textvline(label = "0.019", vjust = 1.3, hjust=-0.0,data = data_ch[data_ch$Y == 1, ],
aes(xintercept = a), linetype = "dashed", color="red", alpha = 0.8)+
ggtitle("Switzerland")+
theme_minimal()+
theme(legend.position = "none", plot.title = element_text(hjust = 0.5))
ch
#Plot
ch <- ggplot(data_ch[data_ch$x >= 0.0189804,], aes(x = x, y = Y)) +
geom_line(color="black", linewidth=1) +
#geom_ribbon(data=data_ch,
#aes(ymin = Ymin, ymax = Ymax), fill = "black", alpha = 0.3, colour=NA) +
scale_x_log10(
limits = c(0.005, 1),
breaks = c(0.005, 0.01,0.1, 1),
labels = c(0.005, 0.01,0.1, 1)) +
labs(x = expression(paste("Proportion of ESBL-", italic("E. coli"), " out of total ", italic("E. coli"), " in the gut (%)")),
y = expression(paste("Prevalence of ESBL-", italic("E. coli"), " carriage within the community"))) +
scale_y_continuous(
limits = c(0, 1),
breaks = seq(0, 1, by = 0.2)) +
geom_textvline(label = "0.019", vjust = 1.3, hjust=-0.0,data = data_ch[data_ch$Y == 1, ],
aes(xintercept = a), linetype = "dashed", color="red", alpha = 0.8)+
ggtitle("Switzerland")+
theme_minimal()+
theme(legend.position = "none", plot.title = element_text(hjust = 0.5))
ch
#Estimate mean ESBL-Ec adjusted by population in Switzerland
mean = (1.722433*64000+1.397264*55000+2.019172*454000+1.913655*471000+1.970193*124000+1.373625*62000)/(64000+55000+454000+471000+124000+62000)
mean
View(data_ch)
####ARA Altenrhein with CI-------
# Create a data frame with different values of "a": a=gamma_mean, a=gamma_mean - CI, a=gamma_mean + CI
data_alt <- data.frame(x = seq(0.01, 1, by = 0.0001),
a = c(0.01722433))  #a = gamma_mean
data_alt_min <- data.frame(x = seq(0.01, 1, by = 0.0001),
a = c(0.01526898)) #a = gamma_mean - CI
data_alt_max <- data.frame(x = seq(0.01, 1, by = 0.0001),
a = c(0.01917968)) #a = gamma_mean + CI
# Calculate Ys based on the function Y = a/x
data_alt$Y <- data_alt$a / data_alt$x
data_alt$Ymin <- data_alt_min$a / data_alt_min$x
data_alt$Ymax <- data_alt_max$a /data_alt_max$x
# Set Y values greater than 1 to 1
data_alt$Y[data_alt$Y > 1] <- 1
data_alt$Ymin[data_alt$Ymin > 1] <- 1
data_alt$Ymax[data_alt$Ymax > 1] <- 1
View(data_alt)
View(data_alt_min)
View(data_alt_min)
View(data_alt_min)
View(data_alt_max)
data_alt_min <- data.frame(x = seq(0.01, 1, by = 0.0001),
a = c(0.01526898)) #a = gamma_mean - CI
data_alt_max <- data.frame(x = seq(0.01, 1, by = 0.0001),
a = c(0.01917968)) #a = gamma_mean + CI
# Calculate Ys based on the function Y = a/x
data_alt$Y <- data_alt$a / data_alt$x
data_alt$Ymin <- data_alt_min$a / data_alt_min$x
data_alt$Ymax <- data_alt_max$a /data_alt_max$x
# Set Y values greater than 1 to 1
data_alt$Y[data_alt$Y > 1] <- 1
data_alt$Ymin[data_alt$Ymin > 1] <- 1
data_alt$Ymax[data_alt$Ymax > 1] <- 1
View(data_ch)
View(data_alt)
####ARA Chur with CI-------
# Create a data frame with different values of "a": a=gamma_mean, a=gamma_mean - CI, a=gamma_mean + CI
data_chu <- data.frame(x = seq(0.005, 1, by = 0.0001),
a = c(0.01397264))  #a = gamma_mean
data_chu_min <- data.frame(x = seq(0.005, 1, by = 0.0001),
a = c(0.01180494)) #a = gamma_mean - CI
data_chu_max <- data.frame(x = seq(0.005, 1, by = 0.0001),
a = c(0.01614034)) #a = gamma_mean + CI
# Calculate Ys based on the function Y = a/x
data_chu$Y <- data_chu$a / data_chu$x
data_chu$Ymin <- data_chu_min$a / data_chu_min$x
data_chu$Ymax <- data_chu_max$a /data_chu_max$x
# Set Y values greater than 1 to 1
data_chu$Y[data_chu$Y > 1] <- 1
data_chu$Ymin[data_chu$Ymin > 1] <- 1
data_chu$Ymax[data_chu$Ymax > 1] <- 1
View(data_ch)
View(data_chu)
####STEP d'Aïre Genève with CI-------
# Create a data frame with different values of "a": a=gamma_mean, a=gamma_mean - CI, a=gamma_mean + CI
data_gen <- data.frame(x = seq(0.01, 1, by = 0.0001),
a = c(0.02019172))  #a = gamma_mean
data_gen_min <- data.frame(x = seq(0.01, 1, by = 0.0001),
a = c(0.01838417)) #a = gamma_mean - CI
data_gen_max <- data.frame(x = seq(0.01, 1, by = 0.0001),
a = c(0.02199927)) #a = gamma_mean + CI
# Calculate Ys based on the function Y = a/x
data_gen$Y <- data_gen$a / data_gen$x
data_gen$Ymin <- data_gen_min$a / data_gen_min$x
data_gen$Ymax <- data_gen_max$a /data_gen_max$x
# Set Y values greater than 1 to 1
data_gen$Y[data_gen$Y > 1] <- 1
data_gen$Ymin[data_gen$Ymin > 1] <- 1
data_gen$Ymax[data_gen$Ymax > 1] <- 1
View(data_gen)
View(data_gen)
####ARA Werdhölzli Zürich with CI-------
# Create a data frame with different values of "a": a=gamma_mean, a=gamma_mean - CI, a=gamma_mean + CI
data_zur <- data.frame(x = seq(0.01, 1, by = 0.0001),
a = c(0.01913655))  #a = gamma_mean
data_zur_min <- data.frame(x = seq(0.01, 1, by = 0.0001),
a = c(0.01661377)) #a = gamma_mean - CI
data_zur_max <- data.frame(x = seq(0.01, 1, by = 0.0001),
a = c(0.02165933)) #a = gamma_mean + CI
# Calculate Ys based on the function Y = a/x
data_zur$Y <- data_zur$a / data_zur$x
data_zur$Ymin <- data_zur_min$a / data_zur_min$x
data_zur$Ymax <- data_zur_max$a /data_zur_max$x
# Set Y values greater than 1 to 1
data_zur$Y[data_zur$Y > 1] <- 1
data_zur$Ymin[data_zur$Ymin > 1] <- 1
data_zur$Ymax[data_zur$Ymax > 1] <- 1
View(data_zur)
####IDA CDA Lugano with CI-------
# Create a data frame with different values of "a": a=gamma_mean, a=gamma_mean - CI, a=gamma_mean + CI
data_lug <- data.frame(x = seq(0.01, 1, by = 0.0001),
a = c(0.01970193))  #a = gamma_mean
data_lug_min <- data.frame(x = seq(0.01, 1, by = 0.0001),
a = c(0.01743486)) #a = gamma_mean - CI
data_lug_max <- data.frame(x = seq(0.01, 1, by = 0.0001),
a = c(0.021969)) #a = gamma_mean + CI
# Calculate Ys based on the function Y = a/x
data_lug$Y <- data_lug$a / data_lug$x
data_lug$Ymin <- data_lug_min$a / data_lug_min$x
data_lug$Ymax <- data_lug_max$a /data_lug_max$x
# Set Y values greater than 1 to 1
data_lug$Y[data_lug$Y > 1] <- 1
data_lug$Ymin[data_lug$Ymin > 1] <- 1
data_lug$Ymax[data_lug$Ymax > 1] <- 1
View(data_lug)
####ARA Sensetal Laupen with CI-------
# Create a data frame with different values of "a": a=gamma_mean, a=gamma_mean - CI, a=gamma_mean + CI
data_sen <- data.frame(x = seq(0.01, 1, by = 0.0001),
a = c(0.01373625))  #a = gamma_mean
data_sen_min <- data.frame(x = seq(0.01, 1, by = 0.0001),
a = c(0.01221433)) #a = gamma_mean - CI
data_sen_max <- data.frame(x = seq(0.01, 1, by = 0.0001),
a = c(0.01525817)) #a = gamma_mean + CI
# Calculate Ys based on the function Y = a/x
data_sen$Y <- data_sen$a / data_sen$x
data_sen$Ymin <- data_sen_min$a / data_sen_min$x
data_sen$Ymax <- data_sen_max$a /data_sen_max$x
# Set Y values greater than 1 to 1
data_sen$Y[data_sen$Y > 1] <- 1
data_sen$Ymin[data_sen$Ymin > 1] <- 1
data_sen$Ymax[data_sen$Ymax > 1] <- 1
View(data_sen)
View(data_ch)
